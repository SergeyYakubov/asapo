// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.15.8
// source: AsapoMonitoringIngestService.proto

package generated_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AsapoMonitoringIngestServiceClient is the client API for AsapoMonitoringIngestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsapoMonitoringIngestServiceClient interface {
	InsertReceiverDataPoints(ctx context.Context, in *ReceiverDataPointContainer, opts ...grpc.CallOption) (*Empty, error)
	InsertBrokerDataPoints(ctx context.Context, in *BrokerDataPointContainer, opts ...grpc.CallOption) (*Empty, error)
	InsertFtsDataPoints(ctx context.Context, in *FtsToConsumerDataPointContainer, opts ...grpc.CallOption) (*Empty, error)
}

type asapoMonitoringIngestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAsapoMonitoringIngestServiceClient(cc grpc.ClientConnInterface) AsapoMonitoringIngestServiceClient {
	return &asapoMonitoringIngestServiceClient{cc}
}

func (c *asapoMonitoringIngestServiceClient) InsertReceiverDataPoints(ctx context.Context, in *ReceiverDataPointContainer, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AsapoMonitoringIngestService/InsertReceiverDataPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asapoMonitoringIngestServiceClient) InsertBrokerDataPoints(ctx context.Context, in *BrokerDataPointContainer, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AsapoMonitoringIngestService/InsertBrokerDataPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asapoMonitoringIngestServiceClient) InsertFtsDataPoints(ctx context.Context, in *FtsToConsumerDataPointContainer, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AsapoMonitoringIngestService/InsertFtsDataPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsapoMonitoringIngestServiceServer is the server API for AsapoMonitoringIngestService service.
// All implementations must embed UnimplementedAsapoMonitoringIngestServiceServer
// for forward compatibility
type AsapoMonitoringIngestServiceServer interface {
	InsertReceiverDataPoints(context.Context, *ReceiverDataPointContainer) (*Empty, error)
	InsertBrokerDataPoints(context.Context, *BrokerDataPointContainer) (*Empty, error)
	InsertFtsDataPoints(context.Context, *FtsToConsumerDataPointContainer) (*Empty, error)
	mustEmbedUnimplementedAsapoMonitoringIngestServiceServer()
}

// UnimplementedAsapoMonitoringIngestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAsapoMonitoringIngestServiceServer struct {
}

func (UnimplementedAsapoMonitoringIngestServiceServer) InsertReceiverDataPoints(context.Context, *ReceiverDataPointContainer) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertReceiverDataPoints not implemented")
}
func (UnimplementedAsapoMonitoringIngestServiceServer) InsertBrokerDataPoints(context.Context, *BrokerDataPointContainer) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertBrokerDataPoints not implemented")
}
func (UnimplementedAsapoMonitoringIngestServiceServer) InsertFtsDataPoints(context.Context, *FtsToConsumerDataPointContainer) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertFtsDataPoints not implemented")
}
func (UnimplementedAsapoMonitoringIngestServiceServer) mustEmbedUnimplementedAsapoMonitoringIngestServiceServer() {
}

// UnsafeAsapoMonitoringIngestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsapoMonitoringIngestServiceServer will
// result in compilation errors.
type UnsafeAsapoMonitoringIngestServiceServer interface {
	mustEmbedUnimplementedAsapoMonitoringIngestServiceServer()
}

func RegisterAsapoMonitoringIngestServiceServer(s grpc.ServiceRegistrar, srv AsapoMonitoringIngestServiceServer) {
	s.RegisterService(&AsapoMonitoringIngestService_ServiceDesc, srv)
}

func _AsapoMonitoringIngestService_InsertReceiverDataPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiverDataPointContainer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsapoMonitoringIngestServiceServer).InsertReceiverDataPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AsapoMonitoringIngestService/InsertReceiverDataPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsapoMonitoringIngestServiceServer).InsertReceiverDataPoints(ctx, req.(*ReceiverDataPointContainer))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsapoMonitoringIngestService_InsertBrokerDataPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerDataPointContainer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsapoMonitoringIngestServiceServer).InsertBrokerDataPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AsapoMonitoringIngestService/InsertBrokerDataPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsapoMonitoringIngestServiceServer).InsertBrokerDataPoints(ctx, req.(*BrokerDataPointContainer))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsapoMonitoringIngestService_InsertFtsDataPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FtsToConsumerDataPointContainer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsapoMonitoringIngestServiceServer).InsertFtsDataPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AsapoMonitoringIngestService/InsertFtsDataPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsapoMonitoringIngestServiceServer).InsertFtsDataPoints(ctx, req.(*FtsToConsumerDataPointContainer))
	}
	return interceptor(ctx, in, info, handler)
}

// AsapoMonitoringIngestService_ServiceDesc is the grpc.ServiceDesc for AsapoMonitoringIngestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AsapoMonitoringIngestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AsapoMonitoringIngestService",
	HandlerType: (*AsapoMonitoringIngestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertReceiverDataPoints",
			Handler:    _AsapoMonitoringIngestService_InsertReceiverDataPoints_Handler,
		},
		{
			MethodName: "InsertBrokerDataPoints",
			Handler:    _AsapoMonitoringIngestService_InsertBrokerDataPoints_Handler,
		},
		{
			MethodName: "InsertFtsDataPoints",
			Handler:    _AsapoMonitoringIngestService_InsertFtsDataPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AsapoMonitoringIngestService.proto",
}
