// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.15.8
// source: AsapoMonitoringQueryService.proto

package generated_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AsapoMonitoringQueryServiceClient is the client API for AsapoMonitoringQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsapoMonitoringQueryServiceClient interface {
	GetMetadata(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetadataResponse, error)
	GetTopology(ctx context.Context, in *ToplogyQuery, opts ...grpc.CallOption) (*TopologyResponse, error)
	GetDataPoints(ctx context.Context, in *DataPointsQuery, opts ...grpc.CallOption) (*DataPointsResponse, error)
}

type asapoMonitoringQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAsapoMonitoringQueryServiceClient(cc grpc.ClientConnInterface) AsapoMonitoringQueryServiceClient {
	return &asapoMonitoringQueryServiceClient{cc}
}

func (c *asapoMonitoringQueryServiceClient) GetMetadata(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetadataResponse, error) {
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, "/AsapoMonitoringQueryService/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asapoMonitoringQueryServiceClient) GetTopology(ctx context.Context, in *ToplogyQuery, opts ...grpc.CallOption) (*TopologyResponse, error) {
	out := new(TopologyResponse)
	err := c.cc.Invoke(ctx, "/AsapoMonitoringQueryService/GetTopology", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asapoMonitoringQueryServiceClient) GetDataPoints(ctx context.Context, in *DataPointsQuery, opts ...grpc.CallOption) (*DataPointsResponse, error) {
	out := new(DataPointsResponse)
	err := c.cc.Invoke(ctx, "/AsapoMonitoringQueryService/GetDataPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsapoMonitoringQueryServiceServer is the server API for AsapoMonitoringQueryService service.
// All implementations must embed UnimplementedAsapoMonitoringQueryServiceServer
// for forward compatibility
type AsapoMonitoringQueryServiceServer interface {
	GetMetadata(context.Context, *Empty) (*MetadataResponse, error)
	GetTopology(context.Context, *ToplogyQuery) (*TopologyResponse, error)
	GetDataPoints(context.Context, *DataPointsQuery) (*DataPointsResponse, error)
	mustEmbedUnimplementedAsapoMonitoringQueryServiceServer()
}

// UnimplementedAsapoMonitoringQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAsapoMonitoringQueryServiceServer struct {
}

func (UnimplementedAsapoMonitoringQueryServiceServer) GetMetadata(context.Context, *Empty) (*MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedAsapoMonitoringQueryServiceServer) GetTopology(context.Context, *ToplogyQuery) (*TopologyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopology not implemented")
}
func (UnimplementedAsapoMonitoringQueryServiceServer) GetDataPoints(context.Context, *DataPointsQuery) (*DataPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataPoints not implemented")
}
func (UnimplementedAsapoMonitoringQueryServiceServer) mustEmbedUnimplementedAsapoMonitoringQueryServiceServer() {
}

// UnsafeAsapoMonitoringQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsapoMonitoringQueryServiceServer will
// result in compilation errors.
type UnsafeAsapoMonitoringQueryServiceServer interface {
	mustEmbedUnimplementedAsapoMonitoringQueryServiceServer()
}

func RegisterAsapoMonitoringQueryServiceServer(s grpc.ServiceRegistrar, srv AsapoMonitoringQueryServiceServer) {
	s.RegisterService(&AsapoMonitoringQueryService_ServiceDesc, srv)
}

func _AsapoMonitoringQueryService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsapoMonitoringQueryServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AsapoMonitoringQueryService/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsapoMonitoringQueryServiceServer).GetMetadata(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsapoMonitoringQueryService_GetTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToplogyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsapoMonitoringQueryServiceServer).GetTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AsapoMonitoringQueryService/GetTopology",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsapoMonitoringQueryServiceServer).GetTopology(ctx, req.(*ToplogyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsapoMonitoringQueryService_GetDataPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataPointsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsapoMonitoringQueryServiceServer).GetDataPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AsapoMonitoringQueryService/GetDataPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsapoMonitoringQueryServiceServer).GetDataPoints(ctx, req.(*DataPointsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// AsapoMonitoringQueryService_ServiceDesc is the grpc.ServiceDesc for AsapoMonitoringQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AsapoMonitoringQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AsapoMonitoringQueryService",
	HandlerType: (*AsapoMonitoringQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetadata",
			Handler:    _AsapoMonitoringQueryService_GetMetadata_Handler,
		},
		{
			MethodName: "GetTopology",
			Handler:    _AsapoMonitoringQueryService_GetTopology_Handler,
		},
		{
			MethodName: "GetDataPoints",
			Handler:    _AsapoMonitoringQueryService_GetDataPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AsapoMonitoringQueryService.proto",
}
