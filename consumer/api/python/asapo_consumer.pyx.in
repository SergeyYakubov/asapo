#distutils: language=c++

cimport asapo_consumer
import numpy as np
cimport numpy as np
import json
from cpython.version cimport PY_MAJOR_VERSION
from libcpp.string cimport string


np.import_array()

cdef extern from "numpy/ndarraytypes.h":
    void PyArray_ENABLEFLAGS(np.ndarray arr, int flags)


cdef str _str(b):
    if PY_MAJOR_VERSION < 3:
        return b
    return b.decode("utf-8")

cdef bytes _bytes(s):
    if type(s) is bytes:
        return s

    elif isinstance(s, unicode):
        return (<unicode>s).encode('utf-8')

    else:
        raise TypeError("Could not convert to unicode.")

class AsapoConsumerError(Exception):
  pass

class AsapoWrongInputError(AsapoConsumerError):
  pass

class AsapoInterruptedTransactionError(AsapoConsumerError):
  pass

class AsapoStreamFinishedError(AsapoConsumerError):
  pass

class AsapoUnavailableServiceError(AsapoConsumerError):
  pass

class AsapoLocalIOError(AsapoConsumerError):
  pass

class AsapoUnsupportedClientError(AsapoConsumerError):
  pass

class AsapoStreamFinishedError(AsapoConsumerError):
  def __init__(self,message,id_max=None,next_stream=None):
    AsapoConsumerError.__init__(self,message)
    self.id_max = id_max
    self.next_stream = _str(next_stream)

class AsapoEndOfStreamError(AsapoConsumerError):
  def __init__(self,message,id_max=None):
    AsapoConsumerError.__init__(self,message)
    self.id_max = id_max

class AsapoPartialDataError(AsapoConsumerError):
  def __init__(self,message,partial_data):
    AsapoConsumerError.__init__(self,message)
    self.partial_data = partial_data

class AsapoNoDataError(AsapoConsumerError):
  def __init__(self,message,id=None,id_max=None):
    AsapoConsumerError.__init__(self,message)
    self.id_max = id_max
    self.id = id

cdef throw_exception(Error& err, res = None):
    cdef ConsumerErrorData* data
    error_string =  _str(err.get().Explain())
    if err == kEndOfStream:
            data=<ConsumerErrorData*>err.get().GetCustomData()
            if data != NULL:
                raise AsapoEndOfStreamError(error_string,data.id_max)
            else:
                raise AsapoEndOfStreamError(error_string)
    elif err == kStreamFinished:
            data=<ConsumerErrorData*>err.get().GetCustomData()
            if data != NULL:
                raise AsapoStreamFinishedError(error_string,data.id_max,data.next_stream)
            else:
                raise AsapoStreamFinishedError(error_string)
    elif err == kNoData:
            data=<ConsumerErrorData*>err.get().GetCustomData()
            if data != NULL:
                raise AsapoNoDataError(error_string,data.id,data.id_max)
            else:
                raise AsapoNoDataError(error_string)
    elif err == kPartialData:
            raise AsapoPartialDataError(error_string, res)
    elif err == kWrongInput:
            raise AsapoWrongInputError(error_string)
    elif err == kLocalIOError:
            raise AsapoLocalIOError(error_string)
    elif err == kUnavailableService:
            raise AsapoUnavailableServiceError(error_string)
    elif err == kInterruptedTransaction:
            raise AsapoInterruptedTransactionError(error_string)
    elif err == kUnsupportedClient:
            raise AsapoUnsupportedClientError(error_string)
    else:
        raise AsapoConsumerError(error_string)

cdef class PyConsumer:
    cdef unique_ptr[Consumer] c_consumer
    cdef StreamFilter _filter_to_cfilter(self,filter) except + :
        if filter == "all":
            return StreamFilter_kAllStreams
        elif filter == "finished":
            return StreamFilter_kFinishedStreams
        elif filter == "unfinished":
            return StreamFilter_kUnfinishedStreams
        else:
            raise AsapoWrongInputError("wrong filter, must be all|finished|unfinished")
    def _op(self, op, group_id, stream, meta_only, uint64_t id):
        cdef MessageMeta info
        cdef string b_group_id = _bytes(group_id)
        cdef string b_stream = _bytes(stream)
        cdef MessageData data
        cdef MessageData* p_data =  <MessageData*>NULL if meta_only else &data
        cdef Error err
        cdef np.npy_intp dims[1]
        if op == "next":
            with nogil:
                err =  self.c_consumer.get().GetNext(b_group_id, &info, p_data,b_stream)
        elif op == "last":
            with nogil:
                err =  self.c_consumer.get().GetLast(&info, p_data, b_stream)
        elif op == "id":
            with nogil:
                err =  self.c_consumer.get().GetById(id, &info, p_data, b_stream)
        if err:
            throw_exception(err)
        info_str = _str(info.Json())
        meta = json.loads(info_str)
        if meta_only:
            return None,meta
        cdef char* ptr = <char*> data.release()
        dims[0] = meta['size']
        arr =  np.PyArray_SimpleNewFromData(1, dims, np.NPY_BYTE, ptr)
        PyArray_ENABLEFLAGS(arr,np.NPY_ARRAY_OWNDATA)
        return arr,meta
    def get_next(self, group_id, meta_only = True, stream = "default"):
        return self._op("next",group_id,stream,meta_only,0)
    def get_last(self, meta_only = True, stream = "default"):
        return self._op("last","",stream,meta_only,0)
    def get_by_id(self,uint64_t id,meta_only = True, stream = "default"):
        return self._op("id","",stream,meta_only,id)
    def retrieve_data(self,meta):
        json_str = json.dumps(meta)
        cdef MessageMeta info
        if not info.SetFromJson(_bytes(json_str)):
            raise AsapoWrongInputError("wrong metadata")
        cdef Error err
        cdef MessageData data
        with nogil:
            err =  self.c_consumer.get().RetrieveData(&info, &data)
        if err:
            throw_exception(err)
        cdef np.npy_intp dims[1]
        info_str = _str(info.Json())
        meta = json.loads(info_str)
        dims[0] = meta['size']
        cdef char* ptr = <char*> data.release()
        arr =  np.PyArray_SimpleNewFromData(1, dims, np.NPY_BYTE, ptr)
        PyArray_ENABLEFLAGS(arr,np.NPY_ARRAY_OWNDATA)
        return arr
    def get_current_size(self, stream = "default"):
        cdef Error err
        cdef uint64_t size
        cdef string b_stream = _bytes(stream)
        with nogil:
            size =  self.c_consumer.get().GetCurrentSize(b_stream,&err)
        err_str = _str(GetErrorString(&err))
        if err:
            throw_exception(err)
        return size
    def get_current_dataset_count(self, stream = "default", bool include_incomplete = False):
        cdef Error err
        cdef uint64_t size
        cdef string b_stream = _bytes(stream)
        with nogil:
            size =  self.c_consumer.get().GetCurrentDatasetCount(b_stream,include_incomplete,&err)
        err_str = _str(GetErrorString(&err))
        if err:
            throw_exception(err)
        return size
    def set_timeout(self,timeout):
        self.c_consumer.get().SetTimeout(timeout)
    def force_no_rdma(self):
        self.c_consumer.get().ForceNoRdma()
    def current_connection_type(self):
        cdef NetworkConnectionType connection_type = self.c_consumer.get().CurrentConnectionType()
        cdef int cased = <int>connection_type
        cdef string result = "Unknown"
        if cased == <int>NetworkConnectionType_kUndefined:
            result = "No connection"
        elif cased == <int>NetworkConnectionType_kAsapoTcp:
            result = "TCP"
        elif cased == <int>NetworkConnectionType_kFabric:
            result = "Fabric"
        return result.decode('utf-8')
    def set_lastread_marker(self, group_id, value, stream = "default"):
        cdef string b_group_id = _bytes(group_id)
        cdef string b_stream = _bytes(stream)
        cdef Error err
        cdef uint64_t id = value
        with nogil:
            err =  self.c_consumer.get().SetLastReadMarker(b_group_id, id, b_stream)
        if err:
            throw_exception(err)
        return
    def get_version_info(self, from_server = "true"):
        cdef string client_info,server_info
        cdef bool supported
        cdef string* p_server_info =  &server_info if from_server else <string*>NULL
        cdef bool* p_supported =  &supported if from_server else <bool*>NULL
        cdef Error err
        with nogil:
                err =  self.c_consumer.get().GetVersionInfo(&client_info,p_server_info,p_supported)
        if err:
            throw_exception(err)
        version = {}
        if from_server:
            return {'client': _str(client_info), 'server': _str(server_info), 'supported': supported}
        else:
            return {'client': _str(client_info)}
    def reset_lastread_marker(self,group_id, stream = "default"):
        cdef string b_group_id = _bytes(group_id)
        cdef string b_stream = _bytes(stream)
        cdef Error err
        with nogil:
            err =  self.c_consumer.get().ResetLastReadMarker(b_group_id,b_stream)
        if err:
            throw_exception(err)
        return
    def generate_group_id(self):
        cdef Error err
        cdef string group_id
        with nogil:
            group_id = self.c_consumer.get().GenerateNewGroupId(&err)
        if err:
            throw_exception(err)
        return _str(group_id)
    def get_stream_list(self,from_stream = "",filter="all"):
        cdef Error err
        cdef vector[StreamInfo] streams
        cdef string b_from_stream = _bytes(from_stream)
        cdef StreamFilter stream_filter = self._filter_to_cfilter(filter)
        with nogil:
            streams = self.c_consumer.get().GetStreamList(b_from_stream,stream_filter,&err)
        if err:
            throw_exception(err)
        list = []
        for stream in streams:
            list.append(json.loads(_str(stream.Json())))
        return list
    def acknowledge(self, group_id, uint64_t id, stream = "default"):
        cdef string b_group_id = _bytes(group_id)
        cdef string b_stream = _bytes(stream)
        cdef Error err
        with nogil:
            err = self.c_consumer.get().Acknowledge(b_group_id,id,b_stream)
        if err:
            throw_exception(err)
    def neg_acknowledge(self, group_id, uint64_t id, uint64_t delay_ms = 0, stream = "default"):
        cdef string b_group_id = _bytes(group_id)
        cdef string b_stream = _bytes(stream)
        cdef Error err
        with nogil:
            err = self.c_consumer.get().NegativeAcknowledge(b_group_id,id,delay_ms,b_stream)
        if err:
            throw_exception(err)
    def set_resend_nacs(self,bool resend, uint64_t delay_ms, uint64_t resend_attempts):
        with nogil:
            self.c_consumer.get().SetResendNacs(resend,delay_ms,resend_attempts)

    def get_last_acknowledged_message(self, group_id, stream = "default"):
        cdef string b_group_id = _bytes(group_id)
        cdef string b_stream = _bytes(stream)
        cdef Error err
        cdef uint64_t id
        with nogil:
            id = self.c_consumer.get().GetLastAcknowledgedMessage(b_group_id,b_stream,&err)
        if err:
            throw_exception(err)
        return id

    def delete_stream(self, stream = 'default', bool error_on_not_exist = True):
        """
         :param stream: stream name
         :type stream: string
         :param error_on_not_exist: will emit AsapoWrongInputError if set to true and tries to delete non-existing stream
         :type error_on_not_exist: bool
         :raises:
            AsapoWrongInputError: wrong input (authorization, ...)
            AsapoTimeoutError: request not finished for a given timeout
            AsapoProducerError: other errors
        """
        cdef Error err
        cdef DeleteStreamOptions opts
        cdef string b_stream = _bytes(stream)
        opts.error_on_not_exist = error_on_not_exist
        with nogil:
            err = self.c_consumer.get().DeleteStream(b_stream,opts)
        if err:
            throw_exception(err)

    def get_unacknowledged_messages(self, group_id, uint64_t from_id = 0, uint64_t to_id = 0, stream = "default"):
        cdef Error err
        cdef string b_group_id = _bytes(group_id)
        cdef string b_stream = _bytes(stream)
        cdef IdList ids
        with nogil:
            ids = self.c_consumer.get().GetUnacknowledgedMessages(b_group_id, from_id, to_id, b_stream, &err)
        if err:
            throw_exception(err)
        list = []
        for id in ids:
            list.append(id)
        return list

    def query_messages(self,query, stream = "default"):
        cdef string b_query = _bytes(query)
        cdef string b_stream = _bytes(stream)
        cdef Error err
        cdef MessageMetas message_metas
        with nogil:
            message_metas = self.c_consumer.get().QueryMessages(b_query,b_stream,&err)
        if err:
            throw_exception(err)
        json_list = []
        for fi in message_metas:
            json_list.append(json.loads(_str(fi.Json())))
        return json_list
    def _op_dataset(self, op, group_id, stream, uint64_t min_size, uint64_t id):
        cdef string b_group_id = _bytes(group_id)
        cdef string b_stream = _bytes(stream)
        cdef MessageMetas message_metas
        cdef DataSet dataset
        cdef Error err
        if op == "next":
            with nogil:
                dataset = self.c_consumer.get().GetNextDataset(b_group_id, min_size,b_stream, &err)
        elif op == "last":
            with nogil:
                dataset = self.c_consumer.get().GetLastDataset(min_size,b_stream, &err)
        elif op == "id":
            with nogil:
                dataset = self.c_consumer.get().GetDatasetById(id, min_size,b_stream, &err)
        json_list = []
        for fi in dataset.content:
            json_list.append(json.loads(_str(fi.Json())))
        res={'id':dataset.id,'expected_size':dataset.expected_size,'content':json_list}
        if err:
            throw_exception(err,res)
        return res
    def get_next_dataset(self, group_id, min_size = 0, stream = "default"):
        return self._op_dataset("next",group_id,stream,min_size,0)
    def get_last_dataset(self, min_size = 0,  stream = "default"):
        return self._op_dataset("last","0",stream,min_size,0)
    def get_dataset_by_id(self, uint64_t id, min_size = 0, stream = "default"):
        return self._op_dataset("id","0",stream,min_size,id)
    def get_beamtime_meta(self):
        cdef Error err
        cdef string meta_str
        with nogil:
            meta_str = self.c_consumer.get().GetBeamtimeMeta(&err)
        if err:
            throw_exception(err)
        meta = json.loads(_str(meta_str))
        return meta
    def get_stream_meta(self, stream = 'default'):
        cdef Error err
        cdef string b_stream = _bytes(stream)
        cdef string meta_str
        with nogil:
            meta_str = self.c_consumer.get().GetStreamMeta(b_stream,&err)
        if err:
            throw_exception(err)
        meta = json.loads(_str(meta_str))
        return meta

    def interrupt_current_operation(self):
        self.c_consumer.get().InterruptCurrentOperation()
cdef class __PyConsumerFactory:
    cdef ConsumerFactory c_factory
    def __cinit__(self):
        with nogil:
            self.c_factory = ConsumerFactory()
    def create_consumer(self,server_name,source_path,has_filesystem,beamtime_id,data_source,token,timeout):
        cdef string b_server_name = _bytes(server_name)
        cdef string b_source_path = _bytes(source_path)
        cdef bool b_has_filesystem = has_filesystem
        cdef SourceCredentials source
        source.beamtime_id = _bytes(beamtime_id)
        source.user_token = _bytes(token)
        source.data_source = _bytes(data_source)
        cdef Error err
        consumer = PyConsumer()
        with nogil:
            consumer.c_consumer = self.c_factory.CreateConsumer(b_server_name,b_source_path,b_has_filesystem,source,&err)
        if err:
            throw_exception(err)
        consumer.c_consumer.get().SetTimeout(timeout)
        return consumer

def create_consumer(server_name,source_path,has_filesystem,beamtime_id,data_source,token,timeout_ms):
    """
      :param server_name: Server endpoint (hostname:port)
      :type server_name: string
      :param source_path: Path to the folder to read data from
      :type source_path: string
      :param has_filesystem: True if the source_path is accessible locally, otherwise will use file transfer service to get data
      :type has_filesystem: bool
      :return: consumer object and error. (None,err) if case of error, (consumer, None) if success
      :rtype: Tuple with consumer object and error.
	"""
    factory = __PyConsumerFactory()
    return factory.create_consumer(server_name,source_path,has_filesystem, beamtime_id,data_source,token,timeout_ms)


__version__ = "@PYTHON_ASAPO_VERSION@@ASAPO_VERSION_COMMIT@"
