// source: AsapoMonitoringQueryService.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var AsapoMonitoringCommonService_pb = require('./AsapoMonitoringCommonService_pb.js');
goog.object.extend(proto, AsapoMonitoringCommonService_pb);
goog.exportSymbol('proto.DataPointsQuery', null, global);
goog.exportSymbol('proto.DataPointsResponse', null, global);
goog.exportSymbol('proto.MetadataResponse', null, global);
goog.exportSymbol('proto.PipelineConnectionQueryMode', null, global);
goog.exportSymbol('proto.RdsMemoryUsageDataPoint', null, global);
goog.exportSymbol('proto.TaskTimeDataPoint', null, global);
goog.exportSymbol('proto.ToplogyQuery', null, global);
goog.exportSymbol('proto.TopologyResponse', null, global);
goog.exportSymbol('proto.TopologyResponseEdge', null, global);
goog.exportSymbol('proto.TopologyResponseNode', null, global);
goog.exportSymbol('proto.TotalFileRateDataPoint', null, global);
goog.exportSymbol('proto.TotalTransferRateDataPoint', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DataPointsQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DataPointsQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DataPointsQuery.displayName = 'proto.DataPointsQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TotalTransferRateDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TotalTransferRateDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TotalTransferRateDataPoint.displayName = 'proto.TotalTransferRateDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TotalFileRateDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TotalFileRateDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TotalFileRateDataPoint.displayName = 'proto.TotalFileRateDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TaskTimeDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TaskTimeDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TaskTimeDataPoint.displayName = 'proto.TaskTimeDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RdsMemoryUsageDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RdsMemoryUsageDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RdsMemoryUsageDataPoint.displayName = 'proto.RdsMemoryUsageDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DataPointsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DataPointsResponse.repeatedFields_, null);
};
goog.inherits(proto.DataPointsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DataPointsResponse.displayName = 'proto.DataPointsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MetadataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MetadataResponse.repeatedFields_, null);
};
goog.inherits(proto.MetadataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MetadataResponse.displayName = 'proto.MetadataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ToplogyQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ToplogyQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ToplogyQuery.displayName = 'proto.ToplogyQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TopologyResponseNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TopologyResponseNode.repeatedFields_, null);
};
goog.inherits(proto.TopologyResponseNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TopologyResponseNode.displayName = 'proto.TopologyResponseNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TopologyResponseEdge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TopologyResponseEdge.repeatedFields_, null);
};
goog.inherits(proto.TopologyResponseEdge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TopologyResponseEdge.displayName = 'proto.TopologyResponseEdge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TopologyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TopologyResponse.repeatedFields_, null);
};
goog.inherits(proto.TopologyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TopologyResponse.displayName = 'proto.TopologyResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DataPointsQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.DataPointsQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DataPointsQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataPointsQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromtimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    beamtimefilter: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sourcefilter: jspb.Message.getFieldWithDefault(msg, 5, ""),
    streamfilter: jspb.Message.getFieldWithDefault(msg, 6, ""),
    receiverfilter: jspb.Message.getFieldWithDefault(msg, 7, ""),
    frompipelinestepfilter: jspb.Message.getFieldWithDefault(msg, 8, ""),
    topipelinestepfilter: jspb.Message.getFieldWithDefault(msg, 9, ""),
    pipelinequerymode: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DataPointsQuery}
 */
proto.DataPointsQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DataPointsQuery;
  return proto.DataPointsQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DataPointsQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DataPointsQuery}
 */
proto.DataPointsQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromtimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeamtimefilter(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcefilter(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamfilter(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverfilter(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrompipelinestepfilter(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopipelinestepfilter(value);
      break;
    case 10:
      var value = /** @type {!proto.PipelineConnectionQueryMode} */ (reader.readEnum());
      msg.setPipelinequerymode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DataPointsQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DataPointsQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DataPointsQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataPointsQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromtimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTotimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBeamtimefilter();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSourcefilter();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStreamfilter();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getReceiverfilter();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getFrompipelinestepfilter();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTopipelinestepfilter();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPipelinequerymode();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * optional uint64 fromTimestamp = 1;
 * @return {number}
 */
proto.DataPointsQuery.prototype.getFromtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DataPointsQuery} returns this
 */
proto.DataPointsQuery.prototype.setFromtimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 toTimestamp = 2;
 * @return {number}
 */
proto.DataPointsQuery.prototype.getTotimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DataPointsQuery} returns this
 */
proto.DataPointsQuery.prototype.setTotimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string beamtimeFilter = 4;
 * @return {string}
 */
proto.DataPointsQuery.prototype.getBeamtimefilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.DataPointsQuery} returns this
 */
proto.DataPointsQuery.prototype.setBeamtimefilter = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sourceFilter = 5;
 * @return {string}
 */
proto.DataPointsQuery.prototype.getSourcefilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.DataPointsQuery} returns this
 */
proto.DataPointsQuery.prototype.setSourcefilter = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string streamFilter = 6;
 * @return {string}
 */
proto.DataPointsQuery.prototype.getStreamfilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.DataPointsQuery} returns this
 */
proto.DataPointsQuery.prototype.setStreamfilter = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string receiverFilter = 7;
 * @return {string}
 */
proto.DataPointsQuery.prototype.getReceiverfilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.DataPointsQuery} returns this
 */
proto.DataPointsQuery.prototype.setReceiverfilter = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string fromPipelineStepFilter = 8;
 * @return {string}
 */
proto.DataPointsQuery.prototype.getFrompipelinestepfilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.DataPointsQuery} returns this
 */
proto.DataPointsQuery.prototype.setFrompipelinestepfilter = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string toPipelineStepFilter = 9;
 * @return {string}
 */
proto.DataPointsQuery.prototype.getTopipelinestepfilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.DataPointsQuery} returns this
 */
proto.DataPointsQuery.prototype.setTopipelinestepfilter = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional PipelineConnectionQueryMode pipelineQueryMode = 10;
 * @return {!proto.PipelineConnectionQueryMode}
 */
proto.DataPointsQuery.prototype.getPipelinequerymode = function() {
  return /** @type {!proto.PipelineConnectionQueryMode} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.PipelineConnectionQueryMode} value
 * @return {!proto.DataPointsQuery} returns this
 */
proto.DataPointsQuery.prototype.setPipelinequerymode = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TotalTransferRateDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.TotalTransferRateDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TotalTransferRateDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TotalTransferRateDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalbytespersecrecv: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalbytespersecsend: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalbytespersecrdssend: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalbytespersecftssend: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TotalTransferRateDataPoint}
 */
proto.TotalTransferRateDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TotalTransferRateDataPoint;
  return proto.TotalTransferRateDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TotalTransferRateDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TotalTransferRateDataPoint}
 */
proto.TotalTransferRateDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalbytespersecrecv(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalbytespersecsend(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalbytespersecrdssend(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalbytespersecftssend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TotalTransferRateDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TotalTransferRateDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TotalTransferRateDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TotalTransferRateDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalbytespersecrecv();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTotalbytespersecsend();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTotalbytespersecrdssend();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTotalbytespersecftssend();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint64 totalBytesPerSecRecv = 1;
 * @return {number}
 */
proto.TotalTransferRateDataPoint.prototype.getTotalbytespersecrecv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TotalTransferRateDataPoint} returns this
 */
proto.TotalTransferRateDataPoint.prototype.setTotalbytespersecrecv = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 totalBytesPerSecSend = 2;
 * @return {number}
 */
proto.TotalTransferRateDataPoint.prototype.getTotalbytespersecsend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TotalTransferRateDataPoint} returns this
 */
proto.TotalTransferRateDataPoint.prototype.setTotalbytespersecsend = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 totalBytesPerSecRdsSend = 3;
 * @return {number}
 */
proto.TotalTransferRateDataPoint.prototype.getTotalbytespersecrdssend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TotalTransferRateDataPoint} returns this
 */
proto.TotalTransferRateDataPoint.prototype.setTotalbytespersecrdssend = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 totalBytesPerSecFtsSend = 4;
 * @return {number}
 */
proto.TotalTransferRateDataPoint.prototype.getTotalbytespersecftssend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TotalTransferRateDataPoint} returns this
 */
proto.TotalTransferRateDataPoint.prototype.setTotalbytespersecftssend = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TotalFileRateDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.TotalFileRateDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TotalFileRateDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TotalFileRateDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalrequests: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cachemisses: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fromcache: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fromdisk: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TotalFileRateDataPoint}
 */
proto.TotalFileRateDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TotalFileRateDataPoint;
  return proto.TotalFileRateDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TotalFileRateDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TotalFileRateDataPoint}
 */
proto.TotalFileRateDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalrequests(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCachemisses(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFromcache(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFromdisk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TotalFileRateDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TotalFileRateDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TotalFileRateDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TotalFileRateDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalrequests();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCachemisses();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFromcache();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getFromdisk();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 totalRequests = 1;
 * @return {number}
 */
proto.TotalFileRateDataPoint.prototype.getTotalrequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TotalFileRateDataPoint} returns this
 */
proto.TotalFileRateDataPoint.prototype.setTotalrequests = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 cacheMisses = 2;
 * @return {number}
 */
proto.TotalFileRateDataPoint.prototype.getCachemisses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TotalFileRateDataPoint} returns this
 */
proto.TotalFileRateDataPoint.prototype.setCachemisses = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 fromCache = 3;
 * @return {number}
 */
proto.TotalFileRateDataPoint.prototype.getFromcache = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TotalFileRateDataPoint} returns this
 */
proto.TotalFileRateDataPoint.prototype.setFromcache = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 fromDisk = 4;
 * @return {number}
 */
proto.TotalFileRateDataPoint.prototype.getFromdisk = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TotalFileRateDataPoint} returns this
 */
proto.TotalFileRateDataPoint.prototype.setFromdisk = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TaskTimeDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.TaskTimeDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TaskTimeDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskTimeDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiveiotimeus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    writetodisktimeus: jspb.Message.getFieldWithDefault(msg, 2, 0),
    writetodatabasetimeus: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rdssendtoconsumertimeus: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TaskTimeDataPoint}
 */
proto.TaskTimeDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TaskTimeDataPoint;
  return proto.TaskTimeDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TaskTimeDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TaskTimeDataPoint}
 */
proto.TaskTimeDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReceiveiotimeus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWritetodisktimeus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWritetodatabasetimeus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRdssendtoconsumertimeus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TaskTimeDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TaskTimeDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TaskTimeDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskTimeDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiveiotimeus();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getWritetodisktimeus();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getWritetodatabasetimeus();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getRdssendtoconsumertimeus();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 receiveIoTimeUs = 1;
 * @return {number}
 */
proto.TaskTimeDataPoint.prototype.getReceiveiotimeus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskTimeDataPoint} returns this
 */
proto.TaskTimeDataPoint.prototype.setReceiveiotimeus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 writeToDiskTimeUs = 2;
 * @return {number}
 */
proto.TaskTimeDataPoint.prototype.getWritetodisktimeus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskTimeDataPoint} returns this
 */
proto.TaskTimeDataPoint.prototype.setWritetodisktimeus = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 writeToDatabaseTimeUs = 3;
 * @return {number}
 */
proto.TaskTimeDataPoint.prototype.getWritetodatabasetimeus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskTimeDataPoint} returns this
 */
proto.TaskTimeDataPoint.prototype.setWritetodatabasetimeus = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 rdsSendToConsumerTimeUs = 4;
 * @return {number}
 */
proto.TaskTimeDataPoint.prototype.getRdssendtoconsumertimeus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskTimeDataPoint} returns this
 */
proto.TaskTimeDataPoint.prototype.setRdssendtoconsumertimeus = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RdsMemoryUsageDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.RdsMemoryUsageDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RdsMemoryUsageDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RdsMemoryUsageDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalusedmemory: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RdsMemoryUsageDataPoint}
 */
proto.RdsMemoryUsageDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RdsMemoryUsageDataPoint;
  return proto.RdsMemoryUsageDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RdsMemoryUsageDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RdsMemoryUsageDataPoint}
 */
proto.RdsMemoryUsageDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalusedmemory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RdsMemoryUsageDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RdsMemoryUsageDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RdsMemoryUsageDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RdsMemoryUsageDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalusedmemory();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 totalUsedMemory = 1;
 * @return {number}
 */
proto.RdsMemoryUsageDataPoint.prototype.getTotalusedmemory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.RdsMemoryUsageDataPoint} returns this
 */
proto.RdsMemoryUsageDataPoint.prototype.setTotalusedmemory = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DataPointsResponse.repeatedFields_ = [3,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DataPointsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DataPointsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DataPointsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataPointsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttimestampinsec: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeintervalinsec: jspb.Message.getFieldWithDefault(msg, 2, 0),
    transferratesList: jspb.Message.toObjectList(msg.getTransferratesList(),
    proto.TotalTransferRateDataPoint.toObject, includeInstance),
    fileratesList: jspb.Message.toObjectList(msg.getFileratesList(),
    proto.TotalFileRateDataPoint.toObject, includeInstance),
    tasktimesList: jspb.Message.toObjectList(msg.getTasktimesList(),
    proto.TaskTimeDataPoint.toObject, includeInstance),
    memoryusagesList: jspb.Message.toObjectList(msg.getMemoryusagesList(),
    proto.RdsMemoryUsageDataPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DataPointsResponse}
 */
proto.DataPointsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DataPointsResponse;
  return proto.DataPointsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DataPointsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DataPointsResponse}
 */
proto.DataPointsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStarttimestampinsec(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeintervalinsec(value);
      break;
    case 3:
      var value = new proto.TotalTransferRateDataPoint;
      reader.readMessage(value,proto.TotalTransferRateDataPoint.deserializeBinaryFromReader);
      msg.addTransferrates(value);
      break;
    case 5:
      var value = new proto.TotalFileRateDataPoint;
      reader.readMessage(value,proto.TotalFileRateDataPoint.deserializeBinaryFromReader);
      msg.addFilerates(value);
      break;
    case 6:
      var value = new proto.TaskTimeDataPoint;
      reader.readMessage(value,proto.TaskTimeDataPoint.deserializeBinaryFromReader);
      msg.addTasktimes(value);
      break;
    case 7:
      var value = new proto.RdsMemoryUsageDataPoint;
      reader.readMessage(value,proto.RdsMemoryUsageDataPoint.deserializeBinaryFromReader);
      msg.addMemoryusages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DataPointsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DataPointsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DataPointsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataPointsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttimestampinsec();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimeintervalinsec();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTransferratesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.TotalTransferRateDataPoint.serializeBinaryToWriter
    );
  }
  f = message.getFileratesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.TotalFileRateDataPoint.serializeBinaryToWriter
    );
  }
  f = message.getTasktimesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.TaskTimeDataPoint.serializeBinaryToWriter
    );
  }
  f = message.getMemoryusagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.RdsMemoryUsageDataPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 startTimestampInSec = 1;
 * @return {number}
 */
proto.DataPointsResponse.prototype.getStarttimestampinsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DataPointsResponse} returns this
 */
proto.DataPointsResponse.prototype.setStarttimestampinsec = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 timeIntervalInSec = 2;
 * @return {number}
 */
proto.DataPointsResponse.prototype.getTimeintervalinsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DataPointsResponse} returns this
 */
proto.DataPointsResponse.prototype.setTimeintervalinsec = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated TotalTransferRateDataPoint transferRates = 3;
 * @return {!Array<!proto.TotalTransferRateDataPoint>}
 */
proto.DataPointsResponse.prototype.getTransferratesList = function() {
  return /** @type{!Array<!proto.TotalTransferRateDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TotalTransferRateDataPoint, 3));
};


/**
 * @param {!Array<!proto.TotalTransferRateDataPoint>} value
 * @return {!proto.DataPointsResponse} returns this
*/
proto.DataPointsResponse.prototype.setTransferratesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.TotalTransferRateDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TotalTransferRateDataPoint}
 */
proto.DataPointsResponse.prototype.addTransferrates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.TotalTransferRateDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DataPointsResponse} returns this
 */
proto.DataPointsResponse.prototype.clearTransferratesList = function() {
  return this.setTransferratesList([]);
};


/**
 * repeated TotalFileRateDataPoint fileRates = 5;
 * @return {!Array<!proto.TotalFileRateDataPoint>}
 */
proto.DataPointsResponse.prototype.getFileratesList = function() {
  return /** @type{!Array<!proto.TotalFileRateDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TotalFileRateDataPoint, 5));
};


/**
 * @param {!Array<!proto.TotalFileRateDataPoint>} value
 * @return {!proto.DataPointsResponse} returns this
*/
proto.DataPointsResponse.prototype.setFileratesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.TotalFileRateDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TotalFileRateDataPoint}
 */
proto.DataPointsResponse.prototype.addFilerates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.TotalFileRateDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DataPointsResponse} returns this
 */
proto.DataPointsResponse.prototype.clearFileratesList = function() {
  return this.setFileratesList([]);
};


/**
 * repeated TaskTimeDataPoint taskTimes = 6;
 * @return {!Array<!proto.TaskTimeDataPoint>}
 */
proto.DataPointsResponse.prototype.getTasktimesList = function() {
  return /** @type{!Array<!proto.TaskTimeDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TaskTimeDataPoint, 6));
};


/**
 * @param {!Array<!proto.TaskTimeDataPoint>} value
 * @return {!proto.DataPointsResponse} returns this
*/
proto.DataPointsResponse.prototype.setTasktimesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.TaskTimeDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TaskTimeDataPoint}
 */
proto.DataPointsResponse.prototype.addTasktimes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.TaskTimeDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DataPointsResponse} returns this
 */
proto.DataPointsResponse.prototype.clearTasktimesList = function() {
  return this.setTasktimesList([]);
};


/**
 * repeated RdsMemoryUsageDataPoint memoryUsages = 7;
 * @return {!Array<!proto.RdsMemoryUsageDataPoint>}
 */
proto.DataPointsResponse.prototype.getMemoryusagesList = function() {
  return /** @type{!Array<!proto.RdsMemoryUsageDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RdsMemoryUsageDataPoint, 7));
};


/**
 * @param {!Array<!proto.RdsMemoryUsageDataPoint>} value
 * @return {!proto.DataPointsResponse} returns this
*/
proto.DataPointsResponse.prototype.setMemoryusagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.RdsMemoryUsageDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RdsMemoryUsageDataPoint}
 */
proto.DataPointsResponse.prototype.addMemoryusages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.RdsMemoryUsageDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DataPointsResponse} returns this
 */
proto.DataPointsResponse.prototype.clearMemoryusagesList = function() {
  return this.setMemoryusagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MetadataResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MetadataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.MetadataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MetadataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MetadataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clustername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    beamtimeList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MetadataResponse}
 */
proto.MetadataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MetadataResponse;
  return proto.MetadataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MetadataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MetadataResponse}
 */
proto.MetadataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClustername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBeamtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MetadataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MetadataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MetadataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MetadataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClustername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBeamtimeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string clusterName = 1;
 * @return {string}
 */
proto.MetadataResponse.prototype.getClustername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.MetadataResponse} returns this
 */
proto.MetadataResponse.prototype.setClustername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string beamtime = 2;
 * @return {!Array<string>}
 */
proto.MetadataResponse.prototype.getBeamtimeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.MetadataResponse} returns this
 */
proto.MetadataResponse.prototype.setBeamtimeList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.MetadataResponse} returns this
 */
proto.MetadataResponse.prototype.addBeamtime = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MetadataResponse} returns this
 */
proto.MetadataResponse.prototype.clearBeamtimeList = function() {
  return this.setBeamtimeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ToplogyQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.ToplogyQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ToplogyQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ToplogyQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromtimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    beamtimefilter: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ToplogyQuery}
 */
proto.ToplogyQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ToplogyQuery;
  return proto.ToplogyQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ToplogyQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ToplogyQuery}
 */
proto.ToplogyQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromtimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeamtimefilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ToplogyQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ToplogyQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ToplogyQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ToplogyQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromtimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTotimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBeamtimefilter();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint64 fromTimestamp = 1;
 * @return {number}
 */
proto.ToplogyQuery.prototype.getFromtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ToplogyQuery} returns this
 */
proto.ToplogyQuery.prototype.setFromtimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 toTimestamp = 2;
 * @return {number}
 */
proto.ToplogyQuery.prototype.getTotimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ToplogyQuery} returns this
 */
proto.ToplogyQuery.prototype.setTotimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string beamtimeFilter = 3;
 * @return {string}
 */
proto.ToplogyQuery.prototype.getBeamtimefilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ToplogyQuery} returns this
 */
proto.ToplogyQuery.prototype.setBeamtimefilter = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TopologyResponseNode.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TopologyResponseNode.prototype.toObject = function(opt_includeInstance) {
  return proto.TopologyResponseNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TopologyResponseNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TopologyResponseNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    consumerinstancesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    producerinstancesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TopologyResponseNode}
 */
proto.TopologyResponseNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TopologyResponseNode;
  return proto.TopologyResponseNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TopologyResponseNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TopologyResponseNode}
 */
proto.TopologyResponseNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addConsumerinstances(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addProducerinstances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TopologyResponseNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TopologyResponseNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TopologyResponseNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TopologyResponseNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getConsumerinstancesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getProducerinstancesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string nodeId = 1;
 * @return {string}
 */
proto.TopologyResponseNode.prototype.getNodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TopologyResponseNode} returns this
 */
proto.TopologyResponseNode.prototype.setNodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 level = 2;
 * @return {number}
 */
proto.TopologyResponseNode.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TopologyResponseNode} returns this
 */
proto.TopologyResponseNode.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string consumerInstances = 3;
 * @return {!Array<string>}
 */
proto.TopologyResponseNode.prototype.getConsumerinstancesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.TopologyResponseNode} returns this
 */
proto.TopologyResponseNode.prototype.setConsumerinstancesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.TopologyResponseNode} returns this
 */
proto.TopologyResponseNode.prototype.addConsumerinstances = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TopologyResponseNode} returns this
 */
proto.TopologyResponseNode.prototype.clearConsumerinstancesList = function() {
  return this.setConsumerinstancesList([]);
};


/**
 * repeated string producerInstances = 4;
 * @return {!Array<string>}
 */
proto.TopologyResponseNode.prototype.getProducerinstancesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.TopologyResponseNode} returns this
 */
proto.TopologyResponseNode.prototype.setProducerinstancesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.TopologyResponseNode} returns this
 */
proto.TopologyResponseNode.prototype.addProducerinstances = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TopologyResponseNode} returns this
 */
proto.TopologyResponseNode.prototype.clearProducerinstancesList = function() {
  return this.setProducerinstancesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TopologyResponseEdge.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TopologyResponseEdge.prototype.toObject = function(opt_includeInstance) {
  return proto.TopologyResponseEdge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TopologyResponseEdge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TopologyResponseEdge.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromnodeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tonodeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sourcename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    involvedreceiversList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TopologyResponseEdge}
 */
proto.TopologyResponseEdge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TopologyResponseEdge;
  return proto.TopologyResponseEdge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TopologyResponseEdge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TopologyResponseEdge}
 */
proto.TopologyResponseEdge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromnodeid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTonodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addInvolvedreceivers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TopologyResponseEdge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TopologyResponseEdge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TopologyResponseEdge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TopologyResponseEdge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromnodeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTonodeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourcename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInvolvedreceiversList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string fromNodeId = 1;
 * @return {string}
 */
proto.TopologyResponseEdge.prototype.getFromnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TopologyResponseEdge} returns this
 */
proto.TopologyResponseEdge.prototype.setFromnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string toNodeId = 2;
 * @return {string}
 */
proto.TopologyResponseEdge.prototype.getTonodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TopologyResponseEdge} returns this
 */
proto.TopologyResponseEdge.prototype.setTonodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sourceName = 3;
 * @return {string}
 */
proto.TopologyResponseEdge.prototype.getSourcename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TopologyResponseEdge} returns this
 */
proto.TopologyResponseEdge.prototype.setSourcename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string involvedReceivers = 4;
 * @return {!Array<string>}
 */
proto.TopologyResponseEdge.prototype.getInvolvedreceiversList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.TopologyResponseEdge} returns this
 */
proto.TopologyResponseEdge.prototype.setInvolvedreceiversList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.TopologyResponseEdge} returns this
 */
proto.TopologyResponseEdge.prototype.addInvolvedreceivers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TopologyResponseEdge} returns this
 */
proto.TopologyResponseEdge.prototype.clearInvolvedreceiversList = function() {
  return this.setInvolvedreceiversList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TopologyResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TopologyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.TopologyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TopologyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TopologyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.TopologyResponseNode.toObject, includeInstance),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    proto.TopologyResponseEdge.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TopologyResponse}
 */
proto.TopologyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TopologyResponse;
  return proto.TopologyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TopologyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TopologyResponse}
 */
proto.TopologyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TopologyResponseNode;
      reader.readMessage(value,proto.TopologyResponseNode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 2:
      var value = new proto.TopologyResponseEdge;
      reader.readMessage(value,proto.TopologyResponseEdge.deserializeBinaryFromReader);
      msg.addEdges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TopologyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TopologyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TopologyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TopologyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TopologyResponseNode.serializeBinaryToWriter
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TopologyResponseEdge.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TopologyResponseNode nodes = 1;
 * @return {!Array<!proto.TopologyResponseNode>}
 */
proto.TopologyResponse.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.TopologyResponseNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TopologyResponseNode, 1));
};


/**
 * @param {!Array<!proto.TopologyResponseNode>} value
 * @return {!proto.TopologyResponse} returns this
*/
proto.TopologyResponse.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TopologyResponseNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TopologyResponseNode}
 */
proto.TopologyResponse.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TopologyResponseNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TopologyResponse} returns this
 */
proto.TopologyResponse.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * repeated TopologyResponseEdge edges = 2;
 * @return {!Array<!proto.TopologyResponseEdge>}
 */
proto.TopologyResponse.prototype.getEdgesList = function() {
  return /** @type{!Array<!proto.TopologyResponseEdge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TopologyResponseEdge, 2));
};


/**
 * @param {!Array<!proto.TopologyResponseEdge>} value
 * @return {!proto.TopologyResponse} returns this
*/
proto.TopologyResponse.prototype.setEdgesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TopologyResponseEdge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TopologyResponseEdge}
 */
proto.TopologyResponse.prototype.addEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TopologyResponseEdge, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TopologyResponse} returns this
 */
proto.TopologyResponse.prototype.clearEdgesList = function() {
  return this.setEdgesList([]);
};


/**
 * @enum {number}
 */
proto.PipelineConnectionQueryMode = {
  INVALID_QUERY_MODE: 0,
  EXACTPATH: 1,
  JUSTRELATEDTOSTEP: 2
};

goog.object.extend(exports, proto);
