// source: AsapoMonitoringIngestService.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var AsapoMonitoringCommonService_pb = require('./AsapoMonitoringCommonService_pb.js');
goog.object.extend(proto, AsapoMonitoringCommonService_pb);
goog.exportSymbol('proto.BrokerDataPointContainer', null, global);
goog.exportSymbol('proto.BrokerRequestDataPoint', null, global);
goog.exportSymbol('proto.FdsToConsumerDataPoint', null, global);
goog.exportSymbol('proto.FtsToConsumerDataPointContainer', null, global);
goog.exportSymbol('proto.ProducerToReceiverTransferDataPoint', null, global);
goog.exportSymbol('proto.RdsMemoryDataPoint', null, global);
goog.exportSymbol('proto.RdsToConsumerDataPoint', null, global);
goog.exportSymbol('proto.ReceiverDataPointContainer', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProducerToReceiverTransferDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProducerToReceiverTransferDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProducerToReceiverTransferDataPoint.displayName = 'proto.ProducerToReceiverTransferDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BrokerRequestDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BrokerRequestDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BrokerRequestDataPoint.displayName = 'proto.BrokerRequestDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RdsMemoryDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RdsMemoryDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RdsMemoryDataPoint.displayName = 'proto.RdsMemoryDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RdsToConsumerDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RdsToConsumerDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RdsToConsumerDataPoint.displayName = 'proto.RdsToConsumerDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FdsToConsumerDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FdsToConsumerDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FdsToConsumerDataPoint.displayName = 'proto.FdsToConsumerDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReceiverDataPointContainer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ReceiverDataPointContainer.repeatedFields_, null);
};
goog.inherits(proto.ReceiverDataPointContainer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReceiverDataPointContainer.displayName = 'proto.ReceiverDataPointContainer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BrokerDataPointContainer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BrokerDataPointContainer.repeatedFields_, null);
};
goog.inherits(proto.BrokerDataPointContainer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BrokerDataPointContainer.displayName = 'proto.BrokerDataPointContainer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FtsToConsumerDataPointContainer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FtsToConsumerDataPointContainer.repeatedFields_, null);
};
goog.inherits(proto.FtsToConsumerDataPointContainer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FtsToConsumerDataPointContainer.displayName = 'proto.FtsToConsumerDataPointContainer';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProducerToReceiverTransferDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.ProducerToReceiverTransferDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProducerToReceiverTransferDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProducerToReceiverTransferDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    pipelinestepid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    producerinstanceid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    beamtime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    source: jspb.Message.getFieldWithDefault(msg, 4, ""),
    stream: jspb.Message.getFieldWithDefault(msg, 5, ""),
    filecount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    totalfilesize: jspb.Message.getFieldWithDefault(msg, 7, 0),
    totaltransferreceivetimeinmicroseconds: jspb.Message.getFieldWithDefault(msg, 8, 0),
    totalwriteiotimeinmicroseconds: jspb.Message.getFieldWithDefault(msg, 9, 0),
    totaldbtimeinmicroseconds: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProducerToReceiverTransferDataPoint}
 */
proto.ProducerToReceiverTransferDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProducerToReceiverTransferDataPoint;
  return proto.ProducerToReceiverTransferDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProducerToReceiverTransferDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProducerToReceiverTransferDataPoint}
 */
proto.ProducerToReceiverTransferDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPipelinestepid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProducerinstanceid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeamtime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFilecount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalfilesize(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotaltransferreceivetimeinmicroseconds(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalwriteiotimeinmicroseconds(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotaldbtimeinmicroseconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProducerToReceiverTransferDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProducerToReceiverTransferDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProducerToReceiverTransferDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProducerToReceiverTransferDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPipelinestepid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProducerinstanceid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBeamtime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFilecount();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getTotalfilesize();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getTotaltransferreceivetimeinmicroseconds();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getTotalwriteiotimeinmicroseconds();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getTotaldbtimeinmicroseconds();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
};


/**
 * optional string pipelineStepId = 1;
 * @return {string}
 */
proto.ProducerToReceiverTransferDataPoint.prototype.getPipelinestepid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProducerToReceiverTransferDataPoint} returns this
 */
proto.ProducerToReceiverTransferDataPoint.prototype.setPipelinestepid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string producerInstanceId = 2;
 * @return {string}
 */
proto.ProducerToReceiverTransferDataPoint.prototype.getProducerinstanceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProducerToReceiverTransferDataPoint} returns this
 */
proto.ProducerToReceiverTransferDataPoint.prototype.setProducerinstanceid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string beamtime = 3;
 * @return {string}
 */
proto.ProducerToReceiverTransferDataPoint.prototype.getBeamtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProducerToReceiverTransferDataPoint} returns this
 */
proto.ProducerToReceiverTransferDataPoint.prototype.setBeamtime = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string source = 4;
 * @return {string}
 */
proto.ProducerToReceiverTransferDataPoint.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProducerToReceiverTransferDataPoint} returns this
 */
proto.ProducerToReceiverTransferDataPoint.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string stream = 5;
 * @return {string}
 */
proto.ProducerToReceiverTransferDataPoint.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProducerToReceiverTransferDataPoint} returns this
 */
proto.ProducerToReceiverTransferDataPoint.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 fileCount = 6;
 * @return {number}
 */
proto.ProducerToReceiverTransferDataPoint.prototype.getFilecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProducerToReceiverTransferDataPoint} returns this
 */
proto.ProducerToReceiverTransferDataPoint.prototype.setFilecount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 totalFileSize = 7;
 * @return {number}
 */
proto.ProducerToReceiverTransferDataPoint.prototype.getTotalfilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProducerToReceiverTransferDataPoint} returns this
 */
proto.ProducerToReceiverTransferDataPoint.prototype.setTotalfilesize = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 totalTransferReceiveTimeInMicroseconds = 8;
 * @return {number}
 */
proto.ProducerToReceiverTransferDataPoint.prototype.getTotaltransferreceivetimeinmicroseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProducerToReceiverTransferDataPoint} returns this
 */
proto.ProducerToReceiverTransferDataPoint.prototype.setTotaltransferreceivetimeinmicroseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 totalWriteIoTimeInMicroseconds = 9;
 * @return {number}
 */
proto.ProducerToReceiverTransferDataPoint.prototype.getTotalwriteiotimeinmicroseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProducerToReceiverTransferDataPoint} returns this
 */
proto.ProducerToReceiverTransferDataPoint.prototype.setTotalwriteiotimeinmicroseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 totalDbTimeInMicroseconds = 10;
 * @return {number}
 */
proto.ProducerToReceiverTransferDataPoint.prototype.getTotaldbtimeinmicroseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProducerToReceiverTransferDataPoint} returns this
 */
proto.ProducerToReceiverTransferDataPoint.prototype.setTotaldbtimeinmicroseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BrokerRequestDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.BrokerRequestDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BrokerRequestDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BrokerRequestDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    pipelinestepid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    consumerinstanceid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    command: jspb.Message.getFieldWithDefault(msg, 3, ""),
    beamtime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    source: jspb.Message.getFieldWithDefault(msg, 5, ""),
    stream: jspb.Message.getFieldWithDefault(msg, 6, ""),
    filecount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    totalfilesize: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BrokerRequestDataPoint}
 */
proto.BrokerRequestDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BrokerRequestDataPoint;
  return proto.BrokerRequestDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BrokerRequestDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BrokerRequestDataPoint}
 */
proto.BrokerRequestDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPipelinestepid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsumerinstanceid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeamtime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFilecount(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalfilesize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BrokerRequestDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BrokerRequestDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BrokerRequestDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BrokerRequestDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPipelinestepid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConsumerinstanceid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommand();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBeamtime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFilecount();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getTotalfilesize();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional string pipelineStepId = 1;
 * @return {string}
 */
proto.BrokerRequestDataPoint.prototype.getPipelinestepid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.BrokerRequestDataPoint} returns this
 */
proto.BrokerRequestDataPoint.prototype.setPipelinestepid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string consumerInstanceId = 2;
 * @return {string}
 */
proto.BrokerRequestDataPoint.prototype.getConsumerinstanceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.BrokerRequestDataPoint} returns this
 */
proto.BrokerRequestDataPoint.prototype.setConsumerinstanceid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string command = 3;
 * @return {string}
 */
proto.BrokerRequestDataPoint.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.BrokerRequestDataPoint} returns this
 */
proto.BrokerRequestDataPoint.prototype.setCommand = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string beamtime = 4;
 * @return {string}
 */
proto.BrokerRequestDataPoint.prototype.getBeamtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.BrokerRequestDataPoint} returns this
 */
proto.BrokerRequestDataPoint.prototype.setBeamtime = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string source = 5;
 * @return {string}
 */
proto.BrokerRequestDataPoint.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.BrokerRequestDataPoint} returns this
 */
proto.BrokerRequestDataPoint.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string stream = 6;
 * @return {string}
 */
proto.BrokerRequestDataPoint.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.BrokerRequestDataPoint} returns this
 */
proto.BrokerRequestDataPoint.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 fileCount = 7;
 * @return {number}
 */
proto.BrokerRequestDataPoint.prototype.getFilecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.BrokerRequestDataPoint} returns this
 */
proto.BrokerRequestDataPoint.prototype.setFilecount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 totalFileSize = 8;
 * @return {number}
 */
proto.BrokerRequestDataPoint.prototype.getTotalfilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.BrokerRequestDataPoint} returns this
 */
proto.BrokerRequestDataPoint.prototype.setTotalfilesize = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RdsMemoryDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.RdsMemoryDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RdsMemoryDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RdsMemoryDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    beamtime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    source: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stream: jspb.Message.getFieldWithDefault(msg, 3, ""),
    usedbytes: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalbytes: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RdsMemoryDataPoint}
 */
proto.RdsMemoryDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RdsMemoryDataPoint;
  return proto.RdsMemoryDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RdsMemoryDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RdsMemoryDataPoint}
 */
proto.RdsMemoryDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeamtime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsedbytes(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalbytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RdsMemoryDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RdsMemoryDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RdsMemoryDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RdsMemoryDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeamtime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUsedbytes();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTotalbytes();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string beamtime = 1;
 * @return {string}
 */
proto.RdsMemoryDataPoint.prototype.getBeamtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.RdsMemoryDataPoint} returns this
 */
proto.RdsMemoryDataPoint.prototype.setBeamtime = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string source = 2;
 * @return {string}
 */
proto.RdsMemoryDataPoint.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.RdsMemoryDataPoint} returns this
 */
proto.RdsMemoryDataPoint.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string stream = 3;
 * @return {string}
 */
proto.RdsMemoryDataPoint.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.RdsMemoryDataPoint} returns this
 */
proto.RdsMemoryDataPoint.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 usedBytes = 4;
 * @return {number}
 */
proto.RdsMemoryDataPoint.prototype.getUsedbytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.RdsMemoryDataPoint} returns this
 */
proto.RdsMemoryDataPoint.prototype.setUsedbytes = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 totalBytes = 5;
 * @return {number}
 */
proto.RdsMemoryDataPoint.prototype.getTotalbytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.RdsMemoryDataPoint} returns this
 */
proto.RdsMemoryDataPoint.prototype.setTotalbytes = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RdsToConsumerDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.RdsToConsumerDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RdsToConsumerDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RdsToConsumerDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    pipelinestepid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    consumerinstanceid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    beamtime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    source: jspb.Message.getFieldWithDefault(msg, 4, ""),
    stream: jspb.Message.getFieldWithDefault(msg, 5, ""),
    hits: jspb.Message.getFieldWithDefault(msg, 6, 0),
    misses: jspb.Message.getFieldWithDefault(msg, 7, 0),
    totalfilesize: jspb.Message.getFieldWithDefault(msg, 8, 0),
    totaltransfersendtimeinmicroseconds: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RdsToConsumerDataPoint}
 */
proto.RdsToConsumerDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RdsToConsumerDataPoint;
  return proto.RdsToConsumerDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RdsToConsumerDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RdsToConsumerDataPoint}
 */
proto.RdsToConsumerDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPipelinestepid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsumerinstanceid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeamtime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHits(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMisses(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalfilesize(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotaltransfersendtimeinmicroseconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RdsToConsumerDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RdsToConsumerDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RdsToConsumerDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RdsToConsumerDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPipelinestepid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConsumerinstanceid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBeamtime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHits();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMisses();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getTotalfilesize();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getTotaltransfersendtimeinmicroseconds();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * optional string pipelineStepId = 1;
 * @return {string}
 */
proto.RdsToConsumerDataPoint.prototype.getPipelinestepid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.RdsToConsumerDataPoint} returns this
 */
proto.RdsToConsumerDataPoint.prototype.setPipelinestepid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string consumerInstanceId = 2;
 * @return {string}
 */
proto.RdsToConsumerDataPoint.prototype.getConsumerinstanceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.RdsToConsumerDataPoint} returns this
 */
proto.RdsToConsumerDataPoint.prototype.setConsumerinstanceid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string beamtime = 3;
 * @return {string}
 */
proto.RdsToConsumerDataPoint.prototype.getBeamtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.RdsToConsumerDataPoint} returns this
 */
proto.RdsToConsumerDataPoint.prototype.setBeamtime = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string source = 4;
 * @return {string}
 */
proto.RdsToConsumerDataPoint.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.RdsToConsumerDataPoint} returns this
 */
proto.RdsToConsumerDataPoint.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string stream = 5;
 * @return {string}
 */
proto.RdsToConsumerDataPoint.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.RdsToConsumerDataPoint} returns this
 */
proto.RdsToConsumerDataPoint.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 hits = 6;
 * @return {number}
 */
proto.RdsToConsumerDataPoint.prototype.getHits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.RdsToConsumerDataPoint} returns this
 */
proto.RdsToConsumerDataPoint.prototype.setHits = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 misses = 7;
 * @return {number}
 */
proto.RdsToConsumerDataPoint.prototype.getMisses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.RdsToConsumerDataPoint} returns this
 */
proto.RdsToConsumerDataPoint.prototype.setMisses = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 totalFileSize = 8;
 * @return {number}
 */
proto.RdsToConsumerDataPoint.prototype.getTotalfilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.RdsToConsumerDataPoint} returns this
 */
proto.RdsToConsumerDataPoint.prototype.setTotalfilesize = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 totalTransferSendTimeInMicroseconds = 9;
 * @return {number}
 */
proto.RdsToConsumerDataPoint.prototype.getTotaltransfersendtimeinmicroseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.RdsToConsumerDataPoint} returns this
 */
proto.RdsToConsumerDataPoint.prototype.setTotaltransfersendtimeinmicroseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FdsToConsumerDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.FdsToConsumerDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FdsToConsumerDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FdsToConsumerDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    pipelinestepid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    consumerinstanceid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    beamtime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    source: jspb.Message.getFieldWithDefault(msg, 4, ""),
    stream: jspb.Message.getFieldWithDefault(msg, 5, ""),
    filecount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    totalfilesize: jspb.Message.getFieldWithDefault(msg, 7, 0),
    totaltransfersendtimeinmicroseconds: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FdsToConsumerDataPoint}
 */
proto.FdsToConsumerDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FdsToConsumerDataPoint;
  return proto.FdsToConsumerDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FdsToConsumerDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FdsToConsumerDataPoint}
 */
proto.FdsToConsumerDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPipelinestepid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsumerinstanceid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeamtime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFilecount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalfilesize(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotaltransfersendtimeinmicroseconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FdsToConsumerDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FdsToConsumerDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FdsToConsumerDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FdsToConsumerDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPipelinestepid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConsumerinstanceid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBeamtime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFilecount();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getTotalfilesize();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getTotaltransfersendtimeinmicroseconds();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional string pipelineStepId = 1;
 * @return {string}
 */
proto.FdsToConsumerDataPoint.prototype.getPipelinestepid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.FdsToConsumerDataPoint} returns this
 */
proto.FdsToConsumerDataPoint.prototype.setPipelinestepid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string consumerInstanceId = 2;
 * @return {string}
 */
proto.FdsToConsumerDataPoint.prototype.getConsumerinstanceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.FdsToConsumerDataPoint} returns this
 */
proto.FdsToConsumerDataPoint.prototype.setConsumerinstanceid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string beamtime = 3;
 * @return {string}
 */
proto.FdsToConsumerDataPoint.prototype.getBeamtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.FdsToConsumerDataPoint} returns this
 */
proto.FdsToConsumerDataPoint.prototype.setBeamtime = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string source = 4;
 * @return {string}
 */
proto.FdsToConsumerDataPoint.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.FdsToConsumerDataPoint} returns this
 */
proto.FdsToConsumerDataPoint.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string stream = 5;
 * @return {string}
 */
proto.FdsToConsumerDataPoint.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.FdsToConsumerDataPoint} returns this
 */
proto.FdsToConsumerDataPoint.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 fileCount = 6;
 * @return {number}
 */
proto.FdsToConsumerDataPoint.prototype.getFilecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.FdsToConsumerDataPoint} returns this
 */
proto.FdsToConsumerDataPoint.prototype.setFilecount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 totalFileSize = 7;
 * @return {number}
 */
proto.FdsToConsumerDataPoint.prototype.getTotalfilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.FdsToConsumerDataPoint} returns this
 */
proto.FdsToConsumerDataPoint.prototype.setTotalfilesize = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 totalTransferSendTimeInMicroseconds = 8;
 * @return {number}
 */
proto.FdsToConsumerDataPoint.prototype.getTotaltransfersendtimeinmicroseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.FdsToConsumerDataPoint} returns this
 */
proto.FdsToConsumerDataPoint.prototype.setTotaltransfersendtimeinmicroseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ReceiverDataPointContainer.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReceiverDataPointContainer.prototype.toObject = function(opt_includeInstance) {
  return proto.ReceiverDataPointContainer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReceiverDataPointContainer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReceiverDataPointContainer.toObject = function(includeInstance, msg) {
  var f, obj = {
    receivername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestampms: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupedp2rtransfersList: jspb.Message.toObjectList(msg.getGroupedp2rtransfersList(),
    proto.ProducerToReceiverTransferDataPoint.toObject, includeInstance),
    groupedrds2ctransfersList: jspb.Message.toObjectList(msg.getGroupedrds2ctransfersList(),
    proto.RdsToConsumerDataPoint.toObject, includeInstance),
    groupedmemorystatsList: jspb.Message.toObjectList(msg.getGroupedmemorystatsList(),
    proto.RdsMemoryDataPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReceiverDataPointContainer}
 */
proto.ReceiverDataPointContainer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReceiverDataPointContainer;
  return proto.ReceiverDataPointContainer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReceiverDataPointContainer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReceiverDataPointContainer}
 */
proto.ReceiverDataPointContainer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceivername(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestampms(value);
      break;
    case 3:
      var value = new proto.ProducerToReceiverTransferDataPoint;
      reader.readMessage(value,proto.ProducerToReceiverTransferDataPoint.deserializeBinaryFromReader);
      msg.addGroupedp2rtransfers(value);
      break;
    case 4:
      var value = new proto.RdsToConsumerDataPoint;
      reader.readMessage(value,proto.RdsToConsumerDataPoint.deserializeBinaryFromReader);
      msg.addGroupedrds2ctransfers(value);
      break;
    case 5:
      var value = new proto.RdsMemoryDataPoint;
      reader.readMessage(value,proto.RdsMemoryDataPoint.deserializeBinaryFromReader);
      msg.addGroupedmemorystats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReceiverDataPointContainer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReceiverDataPointContainer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReceiverDataPointContainer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReceiverDataPointContainer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceivername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestampms();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getGroupedp2rtransfersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ProducerToReceiverTransferDataPoint.serializeBinaryToWriter
    );
  }
  f = message.getGroupedrds2ctransfersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.RdsToConsumerDataPoint.serializeBinaryToWriter
    );
  }
  f = message.getGroupedmemorystatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.RdsMemoryDataPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string receiverName = 1;
 * @return {string}
 */
proto.ReceiverDataPointContainer.prototype.getReceivername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReceiverDataPointContainer} returns this
 */
proto.ReceiverDataPointContainer.prototype.setReceivername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 timestampMs = 2;
 * @return {number}
 */
proto.ReceiverDataPointContainer.prototype.getTimestampms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ReceiverDataPointContainer} returns this
 */
proto.ReceiverDataPointContainer.prototype.setTimestampms = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated ProducerToReceiverTransferDataPoint groupedP2rTransfers = 3;
 * @return {!Array<!proto.ProducerToReceiverTransferDataPoint>}
 */
proto.ReceiverDataPointContainer.prototype.getGroupedp2rtransfersList = function() {
  return /** @type{!Array<!proto.ProducerToReceiverTransferDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProducerToReceiverTransferDataPoint, 3));
};


/**
 * @param {!Array<!proto.ProducerToReceiverTransferDataPoint>} value
 * @return {!proto.ReceiverDataPointContainer} returns this
*/
proto.ReceiverDataPointContainer.prototype.setGroupedp2rtransfersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ProducerToReceiverTransferDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProducerToReceiverTransferDataPoint}
 */
proto.ReceiverDataPointContainer.prototype.addGroupedp2rtransfers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ProducerToReceiverTransferDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ReceiverDataPointContainer} returns this
 */
proto.ReceiverDataPointContainer.prototype.clearGroupedp2rtransfersList = function() {
  return this.setGroupedp2rtransfersList([]);
};


/**
 * repeated RdsToConsumerDataPoint groupedRds2cTransfers = 4;
 * @return {!Array<!proto.RdsToConsumerDataPoint>}
 */
proto.ReceiverDataPointContainer.prototype.getGroupedrds2ctransfersList = function() {
  return /** @type{!Array<!proto.RdsToConsumerDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RdsToConsumerDataPoint, 4));
};


/**
 * @param {!Array<!proto.RdsToConsumerDataPoint>} value
 * @return {!proto.ReceiverDataPointContainer} returns this
*/
proto.ReceiverDataPointContainer.prototype.setGroupedrds2ctransfersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.RdsToConsumerDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RdsToConsumerDataPoint}
 */
proto.ReceiverDataPointContainer.prototype.addGroupedrds2ctransfers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.RdsToConsumerDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ReceiverDataPointContainer} returns this
 */
proto.ReceiverDataPointContainer.prototype.clearGroupedrds2ctransfersList = function() {
  return this.setGroupedrds2ctransfersList([]);
};


/**
 * repeated RdsMemoryDataPoint groupedMemoryStats = 5;
 * @return {!Array<!proto.RdsMemoryDataPoint>}
 */
proto.ReceiverDataPointContainer.prototype.getGroupedmemorystatsList = function() {
  return /** @type{!Array<!proto.RdsMemoryDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RdsMemoryDataPoint, 5));
};


/**
 * @param {!Array<!proto.RdsMemoryDataPoint>} value
 * @return {!proto.ReceiverDataPointContainer} returns this
*/
proto.ReceiverDataPointContainer.prototype.setGroupedmemorystatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.RdsMemoryDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RdsMemoryDataPoint}
 */
proto.ReceiverDataPointContainer.prototype.addGroupedmemorystats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.RdsMemoryDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ReceiverDataPointContainer} returns this
 */
proto.ReceiverDataPointContainer.prototype.clearGroupedmemorystatsList = function() {
  return this.setGroupedmemorystatsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BrokerDataPointContainer.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BrokerDataPointContainer.prototype.toObject = function(opt_includeInstance) {
  return proto.BrokerDataPointContainer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BrokerDataPointContainer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BrokerDataPointContainer.toObject = function(includeInstance, msg) {
  var f, obj = {
    brokername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestampms: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupedbrokerrequestsList: jspb.Message.toObjectList(msg.getGroupedbrokerrequestsList(),
    proto.BrokerRequestDataPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BrokerDataPointContainer}
 */
proto.BrokerDataPointContainer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BrokerDataPointContainer;
  return proto.BrokerDataPointContainer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BrokerDataPointContainer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BrokerDataPointContainer}
 */
proto.BrokerDataPointContainer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrokername(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestampms(value);
      break;
    case 3:
      var value = new proto.BrokerRequestDataPoint;
      reader.readMessage(value,proto.BrokerRequestDataPoint.deserializeBinaryFromReader);
      msg.addGroupedbrokerrequests(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BrokerDataPointContainer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BrokerDataPointContainer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BrokerDataPointContainer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BrokerDataPointContainer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBrokername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestampms();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getGroupedbrokerrequestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.BrokerRequestDataPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string brokerName = 1;
 * @return {string}
 */
proto.BrokerDataPointContainer.prototype.getBrokername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.BrokerDataPointContainer} returns this
 */
proto.BrokerDataPointContainer.prototype.setBrokername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 timestampMs = 2;
 * @return {number}
 */
proto.BrokerDataPointContainer.prototype.getTimestampms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.BrokerDataPointContainer} returns this
 */
proto.BrokerDataPointContainer.prototype.setTimestampms = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated BrokerRequestDataPoint groupedBrokerRequests = 3;
 * @return {!Array<!proto.BrokerRequestDataPoint>}
 */
proto.BrokerDataPointContainer.prototype.getGroupedbrokerrequestsList = function() {
  return /** @type{!Array<!proto.BrokerRequestDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BrokerRequestDataPoint, 3));
};


/**
 * @param {!Array<!proto.BrokerRequestDataPoint>} value
 * @return {!proto.BrokerDataPointContainer} returns this
*/
proto.BrokerDataPointContainer.prototype.setGroupedbrokerrequestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.BrokerRequestDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BrokerRequestDataPoint}
 */
proto.BrokerDataPointContainer.prototype.addGroupedbrokerrequests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.BrokerRequestDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.BrokerDataPointContainer} returns this
 */
proto.BrokerDataPointContainer.prototype.clearGroupedbrokerrequestsList = function() {
  return this.setGroupedbrokerrequestsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FtsToConsumerDataPointContainer.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FtsToConsumerDataPointContainer.prototype.toObject = function(opt_includeInstance) {
  return proto.FtsToConsumerDataPointContainer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FtsToConsumerDataPointContainer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FtsToConsumerDataPointContainer.toObject = function(includeInstance, msg) {
  var f, obj = {
    ftsname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestampms: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupedfdstransfersList: jspb.Message.toObjectList(msg.getGroupedfdstransfersList(),
    proto.FdsToConsumerDataPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FtsToConsumerDataPointContainer}
 */
proto.FtsToConsumerDataPointContainer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FtsToConsumerDataPointContainer;
  return proto.FtsToConsumerDataPointContainer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FtsToConsumerDataPointContainer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FtsToConsumerDataPointContainer}
 */
proto.FtsToConsumerDataPointContainer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFtsname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestampms(value);
      break;
    case 3:
      var value = new proto.FdsToConsumerDataPoint;
      reader.readMessage(value,proto.FdsToConsumerDataPoint.deserializeBinaryFromReader);
      msg.addGroupedfdstransfers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FtsToConsumerDataPointContainer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FtsToConsumerDataPointContainer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FtsToConsumerDataPointContainer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FtsToConsumerDataPointContainer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFtsname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestampms();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getGroupedfdstransfersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.FdsToConsumerDataPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ftsName = 1;
 * @return {string}
 */
proto.FtsToConsumerDataPointContainer.prototype.getFtsname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.FtsToConsumerDataPointContainer} returns this
 */
proto.FtsToConsumerDataPointContainer.prototype.setFtsname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 timestampMs = 2;
 * @return {number}
 */
proto.FtsToConsumerDataPointContainer.prototype.getTimestampms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.FtsToConsumerDataPointContainer} returns this
 */
proto.FtsToConsumerDataPointContainer.prototype.setTimestampms = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated FdsToConsumerDataPoint groupedFdsTransfers = 3;
 * @return {!Array<!proto.FdsToConsumerDataPoint>}
 */
proto.FtsToConsumerDataPointContainer.prototype.getGroupedfdstransfersList = function() {
  return /** @type{!Array<!proto.FdsToConsumerDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.FdsToConsumerDataPoint, 3));
};


/**
 * @param {!Array<!proto.FdsToConsumerDataPoint>} value
 * @return {!proto.FtsToConsumerDataPointContainer} returns this
*/
proto.FtsToConsumerDataPointContainer.prototype.setGroupedfdstransfersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.FdsToConsumerDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.FdsToConsumerDataPoint}
 */
proto.FtsToConsumerDataPointContainer.prototype.addGroupedfdstransfers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.FdsToConsumerDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FtsToConsumerDataPointContainer} returns this
 */
proto.FtsToConsumerDataPointContainer.prototype.clearGroupedfdstransfersList = function() {
  return this.setGroupedfdstransfersList([]);
};


goog.object.extend(exports, proto);
